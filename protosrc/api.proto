syntax = "proto3";

option go_package = "proto";

service BackrApi {
    // projects
    rpc GetProjects (GetProjectsRequest) returns (ProjectsListResponse);
    rpc GetProject (GetProjectRequest) returns (ProjectResponse);
    rpc CreateProject (CreateProjectRequest) returns (CreateProjectResponse);

    // files
    rpc GetFiles (GetFilesRequest) returns (GetFilesResponse);
    rpc GetFileURL (GetFileURLRequest) returns (GetFileURLResponse);
    
    // account
    rpc CreateAccount (CreateAccountRequest) returns (AccountResponse);
    rpc ListAccounts (ListAccountsRequest) returns (AccountsListResponse);
    rpc AuthenticateAccount (AuthenticateAccountRequest) returns (AuthenticateAccountResponse);
}

// RPC requests & responses

message GetProjectsRequest {
    enum OrderBy {
        NAME = 0;
        CREATION_DATE = 1;
        ISSUES_COUNT = 2;
    }
    enum OrderDirection {
        ASC = 0;
        DESC = 1;
    }

    OrderBy order_by = 1;
    OrderDirection order_dir = 2;
}

message ProjectsListResponse {
    repeated Project projects = 1;
    int32 total = 2;
}

message CreateProjectRequest {
    string name = 1;
    repeated Rule rules = 2;
}
message CreateProjectResponse {
    Project project = 1;
}

message GetProjectRequest {
    string name = 1;
}

message ProjectResponse {
    Project project = 1;
}

message GetFilesRequest {
    string project_name = 1;
    int32 limit = 2;
}
message GetFilesResponse {
    repeated File files = 1;
}

message GetFileURLRequest {
    string filepath = 1;
}
message GetFileURLResponse {
    string url = 1;
}

message CreateAccountRequest {
    string username = 1;
}

message AccountResponse {
    Account account = 1;
    string password = 2;
}

message ListAccountsRequest {
    
}

message AccountsListResponse {
    repeated Account accounts = 1;
}

message AuthenticateAccountRequest {
    string username = 1;
    string password = 2;
}
message AuthenticateAccountResponse {
    string token = 1;
}

// entities

message Project {
    string name = 1;
    repeated Rule rules = 2;
    
    int64 created_at = 3;
    int32 issues_count = 4;
}

message Rule {
    int32 min_age = 1;
    int32 count = 2;

    // state (readonly)
    repeated File files = 3;
    int64 next_date = 4;
    Error error = 5;
}

message File {
    string path = 1;
    int64 date = 2;
    int64 size = 3;
    int64 expiration = 4;
    Error error = 5;
}

enum Error {
    NO_ERROR = 0;
    UNKNOWN = 1;
    OBSOLETE = 2;
    TOO_SMALL = 3;
    NO_FILE = 4;
}

message Account {
    string username = 1;
}